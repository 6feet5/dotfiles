#!/bin/bash

debug() {
    if [ $VERBOSE == 1 ]; then
        printf "\x1B[33m[DEBUG] ${1}\x1B[0m\n"
    fi
}

error() {
    printf "\x1B[31m[ERROR] ${1}\x1B[0m\n"
    exit 1
}

if ! [ -x "$(command -v jq)" ]; then
    printf "\x1B[31m[ERROR] jq is not installed.\x1B[0m\n"
    exit 1
fi
VERBOSE=0
DRYRUN=0

while getopts "nv" opt; do
    case "${opt}" in
        n ) DRYRUN=1 ;;
        v ) VERBOSE=1 ;;
    esac
done
shift $((OPTIND-1))

if [ -z "$TOKEN" ]; then
    USER=$(pass git/collaborationlayer-traton.com | sed -n 's/username=\(.*\)/\1/p')
    TOKEN=$(pass git/collaborationlayer-traton.com | sed -n 's/password=\(.*\)/\1/p')
    debug "TOKEN: ${TOKEN}"
    debug "USER: ${USER}"
fi

WORKSPACE=${1:-`pwd`}
WORKSPACE=$(realpath $WORKSPACE)
# 
# Locate all devcontainers in selected folder or current work dir
#
CONFIG_FILE=$(fd --hidden devcontainer.json -E .vscode -E .vscode-oss $WORKSPACE | rofi -dmenu )
WORKSPACE=${CONFIG_FILE%%/.devcontainer*}

test -z "$CONFIG_FILE" && error "Aborting..."

echo "Using CONFIG_FILE ${CONFIG_FILE}"
echo "Using workspace ${WORKSPACE}"

CONFIG=$(cat $CONFIG_FILE | grep -v //)
debug "CONFIG: \n${CONFIG}"

IMAGE_FILE=$(echo $CONFIG | jq -r .image)
if [ "$IMAGE_FILE" == "null" ]; then 
    error "No image in file: $CONFIG_FILE"
fi

# Not as user, but using same uid and gid
REMOTE_USER="-u dev"

ARGS=$(echo $CONFIG | jq -r '.runArgs | to_entries? | map("\(.value)")? | join(" ")')
debug "ARGS: ${ARGS}"

PORTS=$(echo $CONFIG | jq -r '.forwardPorts | map("-p \(.):\(.)")? | join(" ")')
debug "PORTS: ${PORTS}"

ENVS=$(echo $CONFIG | jq -r '.containerEnv | to_entries? | map("-e \(.key)=\(.value | sub("localEnv:"; ""))")? | join(" ")')
debug "ENVS: ${ENVS}"

WORK_DIR="/workspace/$(basename ${WORKSPACE})"
debug "WORK_DIR: ${WORK_DIR}"

MOUNT="${MOUNT} --mount type=bind,source=${WORKSPACE},target=${WORK_DIR}"
debug "MOUNT: ${MOUNT}"

debug "CMD: docker run --rm -it $REMOTE_USER $ARGS $PORTS $ENVS $MOUNT -w $WORK_DIR $IMAGE_FILE"
if [ $DRYRUN == 0 ]; then
    eval "docker run --rm -it $REMOTE_USER $PORTS $ENVS $MOUNT -w $WORK_DIR $IMAGE_FILE"
fi
