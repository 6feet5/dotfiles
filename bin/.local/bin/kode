#!/bin/bash

if ! [ -x "$(command -v jq)" ]; then
    printf "\x1B[31m[ERROR] jq is not installed.\x1B[0m\n"
    exit 1
fi
OPTIND=1
VERBOSE=0

while getopts "v" opt; do
    case ${opt} in
        v ) VERBOSE=1 ;;
    esac
done

debug() {
    if [ $VERBOSE == 1 ]; then
        printf "\x1B[33m[DEBUG] ${1}\x1B[0m\n"
    fi
}

error() {
    printf "\x1B[31m[ERROR] ${1}\x1B[0m\n"
    exit 1
}


USER=sssjtp

WORKSPACE=${1:-`pwd`}
WORKSPACE=$(realpath $WORKSPACE)
# 
# Locate all devcontainers in selected folder or current work dir
#
CONFIG_FILE=$(fd --hidden devcontainer.json -E .vscode -E .vscode-oss $WORKSPACE | rofi -dmenu )
WORKSPACE=${CONFIG_FILE%%/.devcontainer*}

test -z "$CONFIG_FILE" && error "Aborting..."

echo "Using CONFIG_FILE ${CONFIG_FILE}"
echo "Using workspace ${WORKSPACE}"

CONFIG=$(cat $CONFIG_FILE | grep -v //)
debug "CONFIG: \n${CONFIG}"

IMAGE_FILE=$(echo $CONFIG | jq -r .image)
if [ "$IMAGE_FILE" == "null" ]; then 
    error "No image in file: $CONFIG_FILE"
fi

# Not as user, but using same uid and gid
#REMOTE_USER="-u $(id -u):$(id -g)"
REMOTE_USER="-u dev"
#REMOTE_USER=$(echo $CONFIG | jq -r .remoteUser)
#debug "REMOTE_USER: ${REMOTE_USER}"
#if ! [ "$REMOTE_USER" == "null" ]; then
#    REMOTE_USER="-u ${REMOTE_USER}"
#fi

ARGS=$(echo $CONFIG | jq -r '.runArgs | to_entries? | map("\(.key)=\"\(.value)\"")? | join(" ")')
debug "ARGS: ${ARGS}"

PORTS=$(echo $CONFIG | jq -r '.forwardPorts | map("-p \(.):\(.)")? | join(" ")')
debug "PORTS: ${PORTS}"

ENVS=$(echo $CONFIG | jq -r '.containerEnv | to_entries? | map("-e \(.key)=\(.value | sub("localEnv:"; ""))")? | join(" ")')
debug "ENVS: ${ENVS}"

WORK_DIR="/workspace/$(basename ${WORKSPACE})"
debug "WORK_DIR: ${WORK_DIR}"

MOUNT="${MOUNT} --mount type=bind,source=${WORKSPACE},target=${WORK_DIR}"
debug "MOUNT: ${MOUNT}"

eval "docker run -it $REMOTE_USER $PORTS $ENVS $MOUNT -w $WORK_DIR $IMAGE_FILE"

